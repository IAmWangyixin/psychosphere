(window.webpackJsonp=window.webpackJsonp||[]).push([[21],{628:function(t,a,s){"use strict";s.r(a);var e=s(17),n=Object(e.a)({},(function(){var t=this,a=t._self._c;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("p",[t._v("一些最常用的 Lexical 节点由核心库拥有和维护。例如："),a("code",[t._v("ParagraphNode")]),t._v(", "),a("code",[t._v("HeadingNode")]),t._v(", "),a("code",[t._v("QuoteNode")]),t._v(", "),a("code",[t._v("List(Item)Node")]),t._v(" 等，这些由 Lexcial 库提供，这为某些编辑器功能提供了更简单的开箱即用体验，但很难覆盖它们的行为。例如，如果您想更改 ListNode 的行为，通常你会扩展该类并重写其方法。但是，您如何告诉 Lexical 在 ListPlugin 中使用 ListNode 子类而不是使用核心库提供的ListNode? 这就是节点覆盖可以提供帮助的地方。")]),t._v(" "),a("p",[t._v("节点覆盖允许您将编辑器中给定节点的所有实例替换为不同节点类的实例。这可通过在编辑器配置中的节点数组实现。")]),t._v(" "),a("div",{staticClass:"language-javascript extra-class"},[a("pre",{pre:!0,attrs:{class:"language-javascript"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" editorConfig "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("...")]),t._v("\n    nodes"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Don't forget to register your custom node separately!")]),t._v("\n        CustomParagraphNode"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n            "),a("span",{pre:!0,attrs:{class:"token literal-property property"}},[t._v("replace")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" ParagraphNode"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n            "),a("span",{pre:!0,attrs:{class:"token function-variable function"}},[t._v("with")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token parameter"}},[a("span",{pre:!0,attrs:{class:"token literal-property property"}},[t._v("node")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" ParagraphNode")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n                "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("CustomParagraphNode")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n            "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("p",[t._v("一旦完成此操作，Lexical 将使用 "),a("code",[t._v("CustomParagraphNode")]),t._v(" 实例替换所有 "),a("code",[t._v("ParagraphNode")]),t._v(" 实例。此功能的一个重要用例是覆盖核心节点的序列化行为。查看下面的完整示例。")]),t._v(" "),a("p",[a("a",{attrs:{href:"https://codesandbox.io/embed/ecstatic-maxwell-kw5utu?fontsize=14&hidenavigation=1&module=/src/Editor.js,/src/plugins/CollapsiblePlugin.ts,/src/nodes/CollapsibleContainerNode.ts&theme=dark&view=split",target:"_blank",rel:"noopener noreferrer"}},[t._v("node override codesandbox"),a("OutboundLink")],1)])])}),[],!1,null,null,null);a.default=n.exports}}]);